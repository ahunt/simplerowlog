simple rowLog TODO file.
--------------_CURRENT:

Delete button OMGP, Reset Button for filter
implement currentlabel in th Outingmanagement panel.
fix filter layout left hand side.

------------------ [HIGH PRIORITY] ---------------------------------------------
-- Set Log level to 4 for release.
-- Implement the permissions.
-- getOutings hashtable caching of members: for  all.

-- Implement all getOutings.

-- Check the listing of Outings tables in the database in the implementation.
   Maybe add some sort of display and selection and deletion in the admin
   panel, with additional permissions regulating its use. Also warn if the 
   number of outings to be shown is too large.
   
   -- In the Admin Panel add filtering options, by default showing only todays outings,
   but allowing sorting by week, month, up to showing an entire year. No more than
   one years outings need be shown, load a different year table by separate selection.
   -- Nah, actually just use a start and end date to select, making things flexible and easy to implement.

-- Launcher check javadoc properties returning null string (or not).

-- FIx the popup / Enter button in the outing dialog.

-- Implement differentiation of members with the same name.

-- Finish the db: implement deletion of items, rearrange order as necessary.
(Done: Boat, Member) (TODO: Outing, Group)

-- Initial LAF: javax.swing.UIManager.getSystemLookAndFeelClassName()
(Add initial configurator)

-- Statistics: rower with most km, comparison, etc.

------------------ [MEDIUM PRIORITY] -------------------------------------------
-- Admin error log for minor messages, e.g. MemberInfo.getName etc.

-- Update the error system, in the gui do the error catching and create an
    appropriate user friendly warning. Log all error at database level though.
    
-- Cache and cache checking in db, and in things like OutingDialog to check for
    last update.
    
-- Documentation: incorporate into packaging.

-- Auto backup tool for db and settings.

-- Logging of everything on the db.

------------------ [LOW PRIORITY] ----------------------------------------------
-- Build in some sort of system for hard compiling the default language files,
    so that srl can run without them if necessary/damaged/missing.
    -- Language files system for when files aren't found. Also clean up locations.
   (Add the default language files to the jar?)

-- Tooltips for info in the admin dialog.

-- Admin Dialog global shortcuts, to add, edit member and outings and boats
   from any location.

-- Change listeners in config panels where necessary, and then change the apply button.

-- Verify that the test classes AREN'T included in the ant jar command.

-- ErrorHandler for all the program, with a command line version implemented.

-- Tell the admin / person logging in if they have failed an attempt, by displaying
    a red text at the top of the dialog, similarly to kde unlock dialogs.

-- In the database, for all getGroups etc, extract data directly from one request
    (instead of simply getting ids, then single groups).
    
-- Security log.

-- Groups Colour.
    
-- Error cleaning on opening of database.

-- Outingdialog: capability to directly add new members (with probability of name
    being a real name.).
    
-- Central localisation manager and interface for updateLocalisation(); Any
localisable classes register so that they are updated. Selector on main screen.

-- AboutDialog: tabbed pane for devs.

-- Date selection: add a pausable thread for the date selector, so that we only
update once the user has stopped changing the date.

-- Move the log config files.

-- Length of names in database: document, check, etc.

-- Update all file locations to get from config.

-- Create localisation gui tool.

-- AdminAuthenticationDialog: update waiting time for next attempts, and format
        the time in hours/minutes/seconds.
        
-- Tooltips

-- Boats: use the type in the name if there are multiple boats, and have shared
    key over the two columns. Check when making users and boats whether a
        similar one exists.
        
-- Active LAF changing on request.

-- equals method for all info classes.

-- Admin dialog: check whether a certain admin/boat can be deleted both from the
    edit dialog and the main dialog part.

-- Refactor modify outing from long time to Date time.

-- Sort out the layouting in the Edit/Modify Outing Dialogs, to make the
    grouping logical, and align the delete button with the rest of the components.
    
-- Selectable columns OutingManagementPanel.

-- Database.createDefaultData() : add some sort of file based verification that
   the user setting up the system has root data, e.g. a random string in a text
   file -- probably best to have the admin put a string in a file during install.
   Mention this in the install instructions.
   
-- Filter boats by type.
--------------------------------------------------------------------------------
Code cleaning and documentation:
--------------------------------
DONE:
org.ahunt.simpleRowLog.gui.admin.BoatManagementPanel
org.ahunt.simpleRowLog.gui.admin.MemberManagementPanel      
